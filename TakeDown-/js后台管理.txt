1.文件的写出：
   var fs=require('fs');
   fs.writeFile("aa.txt","asdasd")   参数1：文件地址，参数2：文件内容
2.文件的读取：
   fs.readFile("aa.txt",function (err,result) {
     console.log(err,result.toString())
    })
                   /////文件读取或者写入失败后err会有参数，
3.目录的读取：
   fs.readdir(".",function (err,result) {
  	 console.log(err,result)
    })
4.模块分类规范（commonJs）简称cmd:

	a.jsp
		exports.adc="asd;"     //相当于定义自己的变量或者函数，方法
		module.exports=name="qusadsa";    //发布一级变量；适用于只定义一个变量或函数等
	b.jsp
		var a=require("./a");  //从a类中获取定义的变量（单独的变量可以.出）
		console.log(a);

5.node的加载文件路径模式：
  如果不写./文件的加载路径为node_modules 虚拟路径需要手动建立（该目录下的文件直接加载，不用写./）,
  该目录下的目录不能直接访问：需要在terminal里进入到该目录下运行命令npm init在该路径里面生成一个json文件。

  如果还是找不到，再从父级目录查找，然后再全局目录查找！全局需要设置环境变量    // cmd 获取路径 %appdata%\npm //NODE_PATH  C:\Users\yvdedu.com\AppData\Roaming\npm\node_modules 设置环境变量
													      // Path C:\Users\yvdedu.com\AppData\Roaming\npm  设置环境变量
  写了.从的当前目录加载
   
6.npm下的包管理工具：
  
	node_modules 该目录里面的目录不能直接访问：需要在terminal里进入到该目录下运行命令npm init在该路径里面生成一个json文件。

	例：jQuery的下载
	在网络上下载包：npm install jQuery -save   //参数-save 在生成的json里体现出依赖关系；方便合作
	terminal进入到该目录下 npm install 自动下载依赖的文件包

	因为下载外国网太慢所以设置资源库为淘宝的：npm config set registry https://registry.npm.taobao.org  
							
						npm install cmp -g  安装中文的镜像文件（-g 安装为全局）;

						cnpm install bootstrap    框架的下载

						cnpm uninstall bootstrap  框架的删除


7.数据库操作：
    1.普通方法：

	var mysql=require("mysql");

	var con=mysql.createConnection({host:"localhost","port":3306,"database":"lhy","user":"root","password":"root"}); //建立一个连接

	con.query('select * from kk where mima=? ',[888],function (err,result) {   //sql语句

    		console.log(result)      //打印获取数据
 		con.end()                //关闭数据连接

	})

    2.连接词方法不关闭数据库连接，原理是建立一个连接用完后把连接放回去
	var mysql=require("mysql");             //规定参数为mysql

	var pool=mysql.createPool({host:"localhost","port":3306,"database":"lhy","user":"root","password":"root"});    //建立一个连接

	pool.getConnection(function (err,conn) {                                                      //获取连接
        	conn.query('select * from kk where mima=?',[888],function (err,result) {      //sql语句
        	console.log(result)    //打印获取数据
       	 	conn.release();        //连接用完后放回去
   		})

	})

8.服务器的建立：
	1.安装环境：cnpm instal express


		var express=require("express");   	//定义需求类型

		var app=express();

 
		app.use(function (req,resp,next) {     //利用中间处理数据  app.use可以使post ，或者 ，get
   		 	req.xx="1";
   			 next();
		});

		app.use(function (req,resp,next) {    	//利用中间处理数据
		        req.xx+="2";
    			next();
		});

	例：	app.get("/u",function (req,resp,next) {    	//利用中间处理数据,在/u下提供服务
		        req.xx+="2";
    			next();
		});



		app.use(function (req,resp) {     

    			 req.xx+="3";
   			 resp.send(req.xx);   		//响应数据  ，最终只有一个中间建拥有发送数据到服务器的功能
   			 next();   		

		})

		app.listen(8080,function () {     	 //搭建服务器

   			 console.log("ok");

		})

9.自定重启服务器工具：
	安装文件：cnpm instal supervisor -g    //安装为全局！
	编辑结构中的 node interpreter 设置为：supervisor .cmd



10.对象思维:
	
	
	app.use("/",require('./router/index'));   //在服务器页面调用其他对象！


	对象的实现：
	
	var express=require("express");      //

	var router =module.exports=express.Router()       //发布一个一级函数 

	router.get("/",function (rep,resp) {      //

  	  resp.send("首页")

	});

	router.get("/a",function (rep,resp) {

   	 resp.send("默认页")

	})



11.视图模块：

	需要下载的模块： cnpm instal ejs        注：ejs文件都位于：views目录下，该目录需手动建立！
	
	
	router.get("/",function (rep,resp) {
    		res.render("an.ejs",｛   	//服务器响应为视图(html)   ejs文件和html 文件一样只是后缀修改为ejs

		data:"数据"；		数据的传送

			｝)          
	});

			ejs端获取数去与jsp没有差异


12.express生成器：

	安装模块 cnpm install express-generator -g

	自动生成12.express命令：
		1. express  .
		2.响应y
		3.安装依赖模块：cnpm instal
		4.删除所有安装文件              默认的视图不是ejs
		5.命令 express --hlep
		6.命令 express .-v ejs   	设置默认视图为ejs

13.node api :
	对象的响应：res.json({id:1,name:"heh"})；
	页面跳转：redirect("")
	编码：res.type("text/plain") 文本格式/res.type("html") html格式
	获取用户在连接输入框内的输入：
		router.get('/:id(\\d+)', function(req, res, next) {     // \\d+用正则来判断输入的是id还是name

  		console.log(req.params)              //获取用户在链接输入框内的输入

  		res.send('respond with a resource');

		});



		router.get('/:name', function(req, res, next) {

 		 console.log(req.params)

 		 res.send('respond with a resource');

		});
	页面用户的数据的获取：
		get方式： req.query;
		pot方式：req.body;



14.cookie-session工具：

		下载模块：cnpm install cookie-session

		var cookieSession=require("cookie-session")({keys:["dasd","dsad"]})       //定义session     keys  设定验证！

		router.use(cookieSession);      //调用导入的中间建

		req.session.id=5;               //设置

		delete req.session.id;           //删除
	 
		req.session=null;              //清空所有的session

15.文件上传组件： 
	
	安装模块：cnpm install connect-multiparty

		
	var cm =require("connect-multiparty")();      //导入中间键

	var fs=require("fs")                          //定义写入流


	router.all('/', cm,function(req, res, next) {            //使用中建键 cm

                      

  	fs.rename(req.files.file.path,"../public/01.jpg")       //使用写入流 写如文件到该目录下


    	res.render('index');

	});


16.可编程的css:                   //注：相当于使用逻辑计算来写公式；再用leeec编辑器来生成css代码

	 安装模块：express 并修改视图为ejs ,css为 less
		代码如下：express . -v ejs -c less
			  cnpm install;
			  cnpm install less -g     //安装less编辑环境为全局

		cd public
		cd stylesheets
		dir                 在dir环境下执行编译过程

		lessc style.less>style.css     执行编译



	1.变量的定义：@xxx:XX;
	2.变量的调用：@color:red;

			.kk-@{xxx}{                //调用后生成的不是属性值而是名字，字符,或者属性名称 的写法@{xx}  例： 	
 			   color: @xxx;
			}
		unit(@{xxx},px)  //给变量添加单位

		
	2.颜色的计算：
		color: red+blue；     //也可以是颜色代码相加，用于颜色的精确控制

	3.混合（函数）：             //支持方法的重载
		预览器的兼容问题：
			例：
				.ab(@a：width,@b：60){               //方法的默认值
 				   -webkit-@{a}:unit(@b,px);
  				  -moz-@{a}:unit(@b,px);
 				   -ms-@{a}:unit(@b,px);
  				  -o-width:unit(@b,px);
    				  @{a}:unit(@b,px);
				}

				.c{
 				  .ab(width,30);     //.ab(@b：60);
				}
	方法：@arguments：      //自动排列传入的参数
	
		.c(@a:red,@b:20px){

  			background: @arguments;

		}
		.a{

 		  .c()

		}

		编译结果：.a {
  				background: red 20px;
		}


	逻辑运算：.c(@a:red,@b:20px){
  			& when (@b>15){                     //
 				 background: @arguments; 相当于if
 			 }
		 }






17.原生js:
	
	1. typeof(i)                   //用于返回该参数类型；
	
	2. js中 || 和 && 的特殊使用方法：
		
		a=b || c   当第一个条件为时返回假c 

		a=b && c   当第一个条件为真时返回c 

	3.js中的遍历：                  //定义2个参数

 		var a=["Asd","asd","asdad","sdf","sdfs"];

       		for(var i=0,num;num=a[i++];){
           		 console.log(num)
     		  }

	4.闭包函数原理：闭包就是一个函数引用宁一个函数的变量，应为变量被引用者，所以不会被回收！！！

	    例：  ()() 第一对括号向脚本返回未命名的函数，后面一对空括号立即执行返回未命名函数，括号内为匿名函数参数！

		 作用：可以创建命名空间，只要把自己所有的代码都写在这个特殊的函数包装内，外部就不能访问，除非你允许（变量前面加window,这样函数就变成全局的了）


		例：(function () {

			window.name=function(){

  				};
				
			}

		     )()  //闭包函数



	5.数组和对象的转换 ：prototype

		例：
			function Elements(doms) {


      			  for(var i=0,dom;dom=doms[i++];){

           			 this.push(dom)

        		}

        			return this;

   			 }


    			Elements.prototype = {                 //给一个对象添加push方法
      			 	 length:0,
       				 push: Array.prototype.push
   			 }



18.原生ajax:                      //居于对xml 元素属性的操作：   xml申明： <?xml version="1.0" encoding="utf-8"?>   

				标签规范：struts-2.1.dtd 基于该文件下便签的操作,也可以使用网络文件：

					<!DOCTYPE struts PUBLIC
					"-//Apache Software Foundation//DTD Struts Configuration 2.1//EN"
					"http://struts.apache.org/dtds/struts-2.1.dtd">

				   
				获取属性内容:

			Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse("NewFile1.xml");   //读取xml文件
			
			Element element =document.getDocumentElement();     //得到xml文档的根节点；
			

			
			NodeList nodeList = element.getElementsByTagName("package");      //得到package便签节点
					
					for (int i = 0; i <nodeList.getLength(); i++) {
						
						System.out.println(nodeList.item(i).getAttributes().getNamedItem("name").getNodeValue());   获取便签属性的值
						
					}


	
19. 内容加密


	常用编码方式：Base64
		
		String a= "世界你好";
		
		String s= Base64.getEncoder().encodeToString(a.getBytes());   //编码
		
		byte[] b = Base64.getDecoder().decode(s);    //解码




		      md5:得到一个不可逆的字符串                      //用法：将MD5编码放入数据库，获取输入后转化为MD5在与数据库中的MD5比较
		
		public static String getMD5( String src) {
		
			try {
				MessageDigest md = MessageDigest.getInstance("MD5");

				md.update(src.getBytes());

				return new BigInteger(1,md.digest()).toString(16);
			
			
			} catch (NoSuchAlgorithmException e) {

				// TODO Auto-generated catch block

				e.printStackTrace();

				return null;
			}	

	
		}


20.前后端分离：      mvvm框架      

	13-1：webpack打包工具：将js文件打包压缩成html文件中<script>标签可以直接调用的文件

		1.导入webpack -g //加载webpack为全局

		2.webpack src/main.js dist/index.js  -w 将src目录下的main.js编译到dist目录下的index.js中；    将源代码封装到index.js中，该文件可以再html文件中直接导入使用；
							//-w的意思是编译过程不结束，修改源文件保存后自动跟新编译    ctrl+c终止该程序

		3.可以在html文件中直接调用<script src="dist/index.js"></script> 该文件
		

		-----------------------------------------------------------------------------------------------------------------------

		4.建立一个配置文件       //如果要编译多个文件上面的方法将不适用，配置文件的优势是可以配置多个编译过程

			该文件名称必须是：webpack.config.js  //否者系统将找不到配置文件
			代码如下：
				module.exports={
   				   entry:{
        				 index:"./src/main.js"     //源文件路径
					 index:"./src/main.js"     //可以配置多个源文件
    				   }, 
   				   output:{ 
       				 	path:"dist",      //输出的路径
        				filename:"[name].js"      //输出文件名称   [name]的意思是系统自己根据源文件名称定义输出文件名称
  				  }
				}

		配置完成文件后在Terminal中的webpack.config.js的父级目录下执行编译命令webpack -p  //-p的意思是将输出文件压缩后输出

		-----------------------------------------------------------------------------------------------------------------------------------------------

		20-2：	html源文件的打包压缩：

				建立一个：package.json   文件目录和webpack.config.js同级
		
				安装模块：html-webpack-plugin -D    //-D 开发依赖

				
				var HtmlWebpackPlugin=require("html-webpack-plugin");     //导入模块

				module.exports={

   					 entry:{

      				  index:"./src/main.js"

   					 },

    				output:{                 

        			path:__dirname+"/dist",

        			filename:"[name].js"

   				 },

    				plugins:[                         //html文件的打包压缩

      				  new HtmlWebpackPlugin({        //调用模块方法

           				 filename:"ma.html",       //源文件名称
					 template:"./src/ma.html"    //输出时html有元素内容，作为模板文件输出

     				  })
   				 ]

				}


		配置完成文件后在Terminal中的webpack.config.js的父级目录下执行编译命令webpack -p  //-p的意思是将输出文件压缩后输出


		
		20-3：样式模块的加载压缩：   //html中的样式写在一个less文件中，less文件的编译和压缩

			安装模块：cnpm install file-loader style-loader css-loader less-loader less -D    //4个模块和less编辑器

				  npm install extract-text-webpack-plugin -D	//安装将less导出为css的模块

				npm install url-loader -D                    //图片的压缩模块     该模块不需要从新调用直接配置loaders即可

				npm install raw-loader -D                   //js中导入html模板文件    该模块不需要从新调用直接配置loaders即可

			var HtmlWebpackPlugin=require("html-webpack-plugin");

			var ExtractTextPlugin=require("extract-text-webpack-plugin");  //css文件导出模块的加载

			module.exports={
   				 entry:{
       				 index:"./src/main.js"
   			 },
  			  output:{
       				 path:__dirname+"/dist",
       			 	filename:"[name].js"
    			 },
   			 module:{

       				 loaders:[     // 配置装载loaders

           			 {test:/\.less$/,loader:ExtractTextPlugin.extract({fallback:"style-loader",use:"css-loader!less-loader"})},    //配置需要加载的模板 test:/\.less$/ 的意思是加载以.开始的less文件（正则的语法），加载的工具是style-loader css-loader less-loader
																	      //使用ExtractTextPlugin的extract方法将less文件导出为css文件，并且自动在html文件中导出该css文件
				{test:/\.(jpg|png|gif)$/,loader:"url-loader?limit=120&name=/img/[name].[ext]"},     //配置图片的加载输出    test:/\.(jpg|png|gif)$/ 以jpg png gif结尾的文件，加载的工具是url-loader，大于120k的文件不使用data协议编写图片（limit=120调节限制大小），name=/img/[name].[ext]输出的路径和文件名称，使用原来的名字和后缀

				{test:/\.html?$/,loader:"raw-loader"},                 //配置js中加载html文件的loader ,js中如下代码即可调用：var html=require("./tpl/xx.html");    
        		]
   			 },
    			plugins:[
        			new HtmlWebpackPlugin({
            			filename:"ma.html",
            			template:"./src/ma.html"
       			 }),
 				new ExtractTextPlugin('style.css')     //配置导出的css的文件名
   			 ],

    			devServer:{
 				 port:8989,    //修改webpack-dev-serve的前端端口

       				 proxy:{                                //资源代理：找不到资源时，就去localhost:3000去加载   //跨域加载   前端加载后端资源
           			**':'http://localhost:3000'            //可以去加载后台服务器的资源  如http://localhost:8080/users/1 在8080前端 端口加载后台服务器的users.js下的服务响应数据
       				 }
    				}

			}

		

		配置完成文件后在Terminal中的webpack.config.js的父级目录下执行编译命令webpack -p  //-p的意思是将输出文件压缩后输出



		20-4：资源的加载：例如jQery:
			npm install jquery -S     //-s永远依赖关系 

			js中导入模块即可用： var $=require("jquery");

			例如：

			var $=require("jquery");   //加载jquery

			var html=require("./tpl/xx.html")    //一个html文件使用html压缩模块，编辑到js中


			$(function () {      

   				 $(html).appendTo("body");    //利用jq的标签选择器将html文件添加到body中

			})
				
		20-5：webpack配置打包的快捷写法：   //该方法不会生成速出文件，编译过程不会停止，修改源文件后保存后立即编译

		加载模块：  npm install webpack-dev-server -g

			path:__dirname+"/dist",  修改输出路径位绝对路径！！！！

			命令行执行：webpack-dev-server    //会产生一个端口，查看结果只能在预览器中运行该端口

			例：http://localhost:8080/webpack-dev-server   //修改源文件后，页面会自动刷新
			











